[该prompt为ai自己总结的，最后的一步未成功】好的，很高兴我们能一起走完这段漫长的调试旅程并找到最终的解决方案。

这里是一份为您精心准备的、完整且无需省略任何配置文件的“终极部署Prompt”。您可以将它保存下来，作为未来部署或回顾的最终参考。它包含了我们所有努力的最终结晶。

-----

### **主题：**

**在类 OpenWRT 系统上，使用 Docker Compose 部署一套包含私有CA、Apache、Python(CGI)和 WebDAV 的安全 Web 服务器的完整指南**

#### **部署目标**

本指南将引导您从零开始，在一个端口受限（80/443不可用）的 Linux 环境（如 iStoreOS/OpenWRT）中，部署一个功能完备且安全的服务栈，包括：

  * **Apache 服务器**：支持静态页面、Python 脚本和 WebDAV。
  * **Python 3 (CGI)**：用于运行动态服务端脚本。
  * **WebDAV**: 用于网络文件存储，受密码保护。
  * **Step-CA**: 一个强大的私有证书颁发机构，为所有服务签发自定义的 SSL 证书，实现完全的 HTTPS 加密。

-----

### **⚠️ 准备工作：替换占位符**

在开始之前，请先确定您自己的配置信息，并替换掉后续文件中所有对应的占位符：

  * `your.domain.com`：您的主域名。
  * `ca.your.domain.com`：您为CA服务设定的域名。
  * `your_server_ip`：您服务器的IP地址。
  * `YourSecureCAPassword`：您为CA设置的一个高强度密码。
  * `your_webdav_user`：您为WebDAV设置的用户名。
  * `YourWebdavPassword`：您为WebDAV设置的一个高强度密码。

-----

### **第 1 步：创建完整的项目目录结构**

通过 SSH 登录到您的服务器，执行以下命令：

```bash
# 定义项目主目录
PROJECT_DIR="/mnt/data/apache_web_server"

# 创建所有必需的目录
mkdir -p ${PROJECT_DIR}/apache/conf
mkdir -p ${PROJECT_DIR}/apache/cgi-bin
mkdir -p ${PROJECT_DIR}/apache/htdocs
mkdir -p ${PROJECT_DIR}/apache/logs
mkdir -p ${PROJECT_DIR}/apache/webdav
mkdir -p ${PROJECT_DIR}/step-ca/certs/apache
mkdir -p ${PROJECT_DIR}/step-ca/config
mkdir -p ${PROJECT_DIR}/step-ca/db
mkdir -p ${PROJECT_DIR}/step-ca/secrets

echo "目录结构创建完成！"
```

-----

### **第 2 步：创建所有配置文件**

请将以下内容完整地写入到对应路径的文件中。

#### **文件 1：`docker-compose.yml`**

**路径：** `/mnt/data/apache_web_server/docker-compose.yml`

```yaml
# /mnt/data/apache_web_server/docker-compose.yml
# 终极解决方案：适配基于 Debian 的新 Apache 环境

version: '3.8'

services:
  apache:
    build:
      context: ./apache
    container_name: apache_web_server
    restart: unless-stopped
    ports:
      - "81:80"
      - "444:443"
    volumes:
      # 网站配置文件
      - ./apache/conf/000-default.conf:/etc/apache2/sites-available/000-default.conf
      # 网站根目录
      - ./apache/htdocs:/var/www/html
      # Python CGI 脚本目录
      - ./apache/cgi-bin:/usr/lib/cgi-bin
      # Apache 日志目录
      - ./apache/logs:/var/log/apache2
      # WebDAV 数据目录
      - ./apache/webdav:/var/www/webdav
      # WebDAV 密码文件 (注意这里的挂载方式是一个文件对一个文件)
      - ./apache/webdav/.htpasswd:/var/www/htpasswd/.htpasswd
      # SSL 证书和私钥
      - ./step-ca/certs/apache/server.crt:/etc/ssl/certs/apache/server.crt
      - ./step-ca/certs/apache/server.key:/etc/ssl/private/apache/server.key
    depends_on:
      - ca
    networks:
      - web_net

  ca:
    image: smallstep/step-ca:latest
    container_name: certificate_authority
    restart: unless-stopped
    volumes:
      - ./step-ca:/home/step
    environment:
      STEPPATH: /home/step
      STEP_CA_PASSWORD_FILE: /home/step/secrets/password
    extra_hosts:
      - "ca.your.domain.com:127.0.0.1" # <<< 请替换为你的CA域名
    networks:
      - web_net

networks:
  web_net:
    driver: bridge
```

#### **文件 2：`apache/Dockerfile`**

**路径：** `/mnt/data/apache_web_server/apache/Dockerfile`

```dockerfile
# /mnt/data/apache_web_server/apache/Dockerfile
# 终极解决方案：基于 Python 镜像构建，确保完全兼容

# 使用一个稳定版的 Python 和 Debian (Bullseye) 作为基础
FROM python:3.9-slim-bullseye

# 设置环境变量，避免 apt-get 在安装时进行交互式提问
ENV DEBIAN_FRONTEND=noninteractive

# 安装 Apache, mod_wsgi, apache2-utils
RUN apt-get update && apt-get install -y --no-install-recommends \
    apache2 \
    libapache2-mod-wsgi-py3 \
    apache2-utils \
    && rm -rf /var/lib/apt/lists/*

# 启用 Apache 所需的关键模块
RUN a2enmod ssl wsgi dav dav_fs rewrite headers

# 将我们的网站内容和日志目录的权限交给 Apache 运行的用户
# Debian 中 Apache 的用户是 www-data
RUN chown -R www-data:www-data /var/www/html
RUN chown -R www-data:www-data /var/log/apache2

# 容器启动时运行的命令
CMD ["apache2ctl", "-D", "FOREGROUND"]
```

#### **文件 3：`apache/conf/000-default.conf`**

**路径：** `/mnt/data/apache_web_server/apache/conf/000-default.conf`

```apache
# /mnt/data/apache_web_server/apache/conf/000-default.conf
# 适用于 Debian Apache 的全新统一配置文件

<VirtualHost *:80>
    ServerName your.domain.com # <<< 请替换为你的域名
    Redirect permanent / https://your.domain.com:444/ # <<< 请替换为你的域名和端口
</VirtualHost>

<VirtualHost *:443>
    ServerName your.domain.com # <<< 请替换为你的域名
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    SSLEngine on
    SSLCertificateFile    /etc/ssl/certs/apache/server.crt
    SSLCertificateKeyFile /etc/ssl/private/apache/server.key

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    <Directory "/usr/lib/cgi-bin/">
        AllowOverride None
        Options +ExecCGI
        Require all granted
        AddHandler cgi-script .py
    </Directory>

    Alias /webdav /var/www/webdav
    <Directory /var/www/webdav>
        DAV On
        AuthType Basic
        AuthName "WebDAV"
        AuthUserFile /var/www/htpasswd/.htpasswd
        Require valid-user
    </Directory>
</VirtualHost>
```

#### **文件 4：`apache/htdocs/index.html` (示例页面)**

**路径：** `/mnt/data/apache_web_server/apache/htdocs/index.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Welcome!</title>
    <style>
        body { font-family: sans-serif; background-color: #f4f4f4; color: #333; margin: 2em; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 2em; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
        h1 { color: #005ea2; }
        a { color: #005ea2; }
    </style>
</head>
<body>
    <div class="container">
        <h1>It Works!</h1>
        <p>Your secure Apache server with Python, WebDAV, and a private CA is running successfully.</p>
        <ul>
            <li><a href="/cgi-bin/test.py">Test Python CGI Script</a></li>
            <li><a href="/webdav/">Access WebDAV</a></li>
        </ul>
    </div>
</body>
</html>
```

#### **文件 5：`apache/cgi-bin/test.py` (示例脚本)**

**路径：** `/mnt/data/apache_web_server/apache/cgi-bin/test.py`

```python
#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import sys
import os
from datetime import datetime

#
# 这是一个用于测试 Python CGI 是否正常工作的脚本
#

# 输出 HTTP 头部
print("Content-Type: text/html;charset=utf-8")
print()

# 输出 HTML 内容
print("<html>")
print("<head><title>Python CGI Test</title></head>")
print("<body>")
print("<h2>Python CGI Script is working!</h2>")
print(f"<p>Python Version: {sys.version}</p>")
print(f"<p>Server Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>")
print("</body>")
print("</html>")
```

**重要：** 创建完 `test.py` 后，请务必赋予它可执行权限：

```bash
chmod +x /mnt/data/apache_web_server/apache/cgi-bin/test.py
```

-----

### **第 3 步：部署和配置流程**

请严格按照以下顺序执行命令。

1.  **手动初始化 CA (仅首次需要)**

      * 临时修改 `docker-compose.yml`，在 `ca` 服务下添加一行 `command: sleep infinity`。
      * 启动 `ca` 容器: `docker-compose up -d ca`
      * 进入容器执行交互式初始化: `docker-compose exec ca step ca init` (根据提示输入CA名称、域名、地址`:9000`、管理员名称和密码 `YourSecureCAPassword`)。
      * 获取容器用户ID: `docker-compose exec ca id` (记下 `uid` 和 `gid`, 通常是 `1000`)。
      * **在主机上**修复权限: `chown -R 1000:1000 /mnt/data/apache_web_server/step-ca` (将1000替换为真实ID)。
      * **在主机上**创建密码文件: `echo "YourSecureCAPassword" > /mnt/data/apache_web_server/step-ca/secrets/password`
      * 删除 `docker-compose.yml` 中添加的 `command: sleep infinity` 行并保存。

2.  **修正 CA 证书有效期策略**

      * 用文本编辑器打开 `/mnt/data/apache_web_server/step-ca/config/ca.json`。
      * 在 `authority.provisioners` 数组中，为您创建的管理员对象添加 `claims` 块，以支持一年期证书。**最终 `ca.json` 的 `authority` 部分应如下所示**：

    <!-- end list -->

    ```json
    "authority": {
        "provisioners": [
            {
                "type": "JWK",
                "name": "admin@internal.lan",
                "key": { "...": "..." },
                "encryptedKey": "...",
                "claims": {
                    "minTLSCertDuration": "5m0s",
                    "maxTLSCertDuration": "8760h0m0s",
                    "defaultTLSCertDuration": "24h0m0s",
                    "disableRenewal": false
                }
            }
        ]
    },
    ```

3.  **启动 CA 服务并签发服务器证书**

      * 强制重新创建CA容器以加载所有配置: `docker-compose up -d --force-recreate ca`
      * 签发证书 (请替换域名和IP):

    <!-- end list -->

    ```bash
    docker-compose exec ca step ca certificate your.domain.com \
    /home/step/certs/apache/server.crt /home/step/certs/apache/server.key \
    --provisioner "admin@internal.lan" --not-after 8760h \
    --san your.domain.com --san your_server_ip
    ```

      * 再次修复权限以包含新生成的证书文件: `chown -R 1000:1000 /mnt/data/apache_web_server/step-ca`

4.  **创建 WebDAV 用户**

    ```bash
    docker-compose run --rm --entrypoint htpasswd apache \
    -bc /var/www/htpasswd/.htpasswd your_webdav_user YourWebdavPassword
    ```

5.  **最终构建并启动**

      * 强制重新构建 Apache 镜像: `docker-compose build --no-cache apache`
      * 启动所有服务: `docker-compose up -d`

-----

### **第 4 步：验证与访问**

1.  **安装根证书**: 在您希望访问此服务的**每一台电脑或手机**上，安装CA的根证书。根证书文件位于主机上的 `/mnt/data/apache_web_server/step-ca/certs/root_ca.crt`。请将其拷贝出来并按您操作系统的指引安装为“受信任的根证书颁发机构”。
2.  **检查服务状态**: 运行 `docker-compose ps`，确保 `apache` 和 `ca` 两个容器都处于 `Up` 状态。
3.  **访问您的服务**: 打开浏览器，输入您配置的地址和端口，例如 `https://your.domain.com:444`。您应该能看到一个带有安全锁标志的欢迎页面。

旅途愉快！
